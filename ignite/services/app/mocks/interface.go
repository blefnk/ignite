// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	app "github.com/ignite/cli/v28/ignite/services/app"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/ignite/cli/v28/ignite/services/app/grpc/v1"
)

// AppInterface is an autogenerated mock type for the Interface type
type AppInterface struct {
	mock.Mock
}

type AppInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AppInterface) EXPECT() *AppInterface_Expecter {
	return &AppInterface_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *AppInterface) Execute(_a0 context.Context, _a1 *v1.ExecutedCommand, _a2 app.ClientAPI) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecutedCommand, app.ClientAPI) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AppInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ExecutedCommand
//   - _a2 app.ClientAPI
func (_e *AppInterface_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AppInterface_Execute_Call {
	return &AppInterface_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *AppInterface_Execute_Call) Run(run func(_a0 context.Context, _a1 *v1.ExecutedCommand, _a2 app.ClientAPI)) *AppInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ExecutedCommand), args[2].(app.ClientAPI))
	})
	return _c
}

func (_c *AppInterface_Execute_Call) Return(_a0 error) *AppInterface_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppInterface_Execute_Call) RunAndReturn(run func(context.Context, *v1.ExecutedCommand, app.ClientAPI) error) *AppInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteHookCleanUp provides a mock function with given fields: _a0, _a1, _a2
func (_m *AppInterface) ExecuteHookCleanUp(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecutedHook, app.ClientAPI) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppInterface_ExecuteHookCleanUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookCleanUp'
type AppInterface_ExecuteHookCleanUp_Call struct {
	*mock.Call
}

// ExecuteHookCleanUp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ExecutedHook
//   - _a2 app.ClientAPI
func (_e *AppInterface_Expecter) ExecuteHookCleanUp(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AppInterface_ExecuteHookCleanUp_Call {
	return &AppInterface_ExecuteHookCleanUp_Call{Call: _e.mock.On("ExecuteHookCleanUp", _a0, _a1, _a2)}
}

func (_c *AppInterface_ExecuteHookCleanUp_Call) Run(run func(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI)) *AppInterface_ExecuteHookCleanUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ExecutedHook), args[2].(app.ClientAPI))
	})
	return _c
}

func (_c *AppInterface_ExecuteHookCleanUp_Call) Return(_a0 error) *AppInterface_ExecuteHookCleanUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppInterface_ExecuteHookCleanUp_Call) RunAndReturn(run func(context.Context, *v1.ExecutedHook, app.ClientAPI) error) *AppInterface_ExecuteHookCleanUp_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteHookPost provides a mock function with given fields: _a0, _a1, _a2
func (_m *AppInterface) ExecuteHookPost(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecutedHook, app.ClientAPI) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppInterface_ExecuteHookPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookPost'
type AppInterface_ExecuteHookPost_Call struct {
	*mock.Call
}

// ExecuteHookPost is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ExecutedHook
//   - _a2 app.ClientAPI
func (_e *AppInterface_Expecter) ExecuteHookPost(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AppInterface_ExecuteHookPost_Call {
	return &AppInterface_ExecuteHookPost_Call{Call: _e.mock.On("ExecuteHookPost", _a0, _a1, _a2)}
}

func (_c *AppInterface_ExecuteHookPost_Call) Run(run func(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI)) *AppInterface_ExecuteHookPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ExecutedHook), args[2].(app.ClientAPI))
	})
	return _c
}

func (_c *AppInterface_ExecuteHookPost_Call) Return(_a0 error) *AppInterface_ExecuteHookPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppInterface_ExecuteHookPost_Call) RunAndReturn(run func(context.Context, *v1.ExecutedHook, app.ClientAPI) error) *AppInterface_ExecuteHookPost_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteHookPre provides a mock function with given fields: _a0, _a1, _a2
func (_m *AppInterface) ExecuteHookPre(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecutedHook, app.ClientAPI) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppInterface_ExecuteHookPre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHookPre'
type AppInterface_ExecuteHookPre_Call struct {
	*mock.Call
}

// ExecuteHookPre is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ExecutedHook
//   - _a2 app.ClientAPI
func (_e *AppInterface_Expecter) ExecuteHookPre(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AppInterface_ExecuteHookPre_Call {
	return &AppInterface_ExecuteHookPre_Call{Call: _e.mock.On("ExecuteHookPre", _a0, _a1, _a2)}
}

func (_c *AppInterface_ExecuteHookPre_Call) Run(run func(_a0 context.Context, _a1 *v1.ExecutedHook, _a2 app.ClientAPI)) *AppInterface_ExecuteHookPre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ExecutedHook), args[2].(app.ClientAPI))
	})
	return _c
}

func (_c *AppInterface_ExecuteHookPre_Call) Return(_a0 error) *AppInterface_ExecuteHookPre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppInterface_ExecuteHookPre_Call) RunAndReturn(run func(context.Context, *v1.ExecutedHook, app.ClientAPI) error) *AppInterface_ExecuteHookPre_Call {
	_c.Call.Return(run)
	return _c
}

// Manifest provides a mock function with given fields: _a0
func (_m *AppInterface) Manifest(_a0 context.Context) (*v1.Manifest, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.Manifest, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.Manifest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppInterface_Manifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Manifest'
type AppInterface_Manifest_Call struct {
	*mock.Call
}

// Manifest is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AppInterface_Expecter) Manifest(_a0 interface{}) *AppInterface_Manifest_Call {
	return &AppInterface_Manifest_Call{Call: _e.mock.On("Manifest", _a0)}
}

func (_c *AppInterface_Manifest_Call) Run(run func(_a0 context.Context)) *AppInterface_Manifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AppInterface_Manifest_Call) Return(_a0 *v1.Manifest, _a1 error) *AppInterface_Manifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppInterface_Manifest_Call) RunAndReturn(run func(context.Context) (*v1.Manifest, error)) *AppInterface_Manifest_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAppInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppInterface creates a new instance of AppInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppInterface(t mockConstructorTestingTNewAppInterface) *AppInterface {
	mock := &AppInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
