package integration_test

import (
	"bytes"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"

	appsconfig "github.com/ignite/cli/v28/ignite/config/apps"
	"github.com/ignite/cli/v28/ignite/pkg/cmdrunner/step"
	"github.com/ignite/cli/v28/ignite/services/app"
	envtest "github.com/ignite/cli/v28/integration"
)

func Test<%= Title %>(t *testing.T) {
	var (
		require = require.New(t)
		env     = envtest.New(t)
		app     = env.Scaffold("github.com/test/test")
	)

	dir, err := os.Getwd()
	require.NoError(err)
	appPath := filepath.Join(filepath.Dir(filepath.Dir(dir)), "<%= Name %>")

	env.Must(env.Exec("install <%= Name %> app locally",
		step.NewSteps(step.New(
			step.Exec(envtest.IgniteApp, "app", "install", appPath),
			step.Workdir(app.SourcePath()),
		)),
	))

	// One local app expected
	assertLocalApps(t, app, []appsconfig.App{
		{
			Path: appPath,
		},
	})
	assertGlobalApps(t, app, nil)

	buf := &bytes.Buffer{}
	env.Must(env.Exec("run <%= Name %>",
		step.NewSteps(step.New(
			step.Exec(
				envtest.IgniteApp,
				"<%= Name %>",
				"hello",
			),
			step.Workdir(app.SourcePath()),
			step.Stdout(buf),
		)),
	))
	require.Equal("Hello, world!\n", buf.String())
}

func assertLocalApps(t *testing.T, app envtest.App, expectedApps []appsconfig.App) {
	cfg, err := appsconfig.ParseDir(app.SourcePath())
	require.NoError(t, err)
	require.ElementsMatch(t, expectedApps, cfg.Apps, "unexpected local apps")
}

func assertGlobalApps(t *testing.T, app envtest.App, expectedApps []appsconfig.App) {
	cfgPath, err := app.AppsPath()
	require.NoError(t, err)
	cfg, err := appsconfig.ParseDir(cfgPath)
	require.NoError(t, err)
	require.ElementsMatch(t, expectedApps, cfg.Apps, "unexpected global apps")
}
